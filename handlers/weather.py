from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import logging
from services.weather_api import WeatherService
from utils.formatters import format_weather_forecast
from utils.states import WeatherStates
from keyboards.inline import (
    get_interval_keyboard,
    get_route_confirmation_keyboard,
    get_location_keyboard,
    ReplyKeyboardRemove
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º router
router = Router()
weather_service = WeatherService()


@router.message(Command("weather"))
async def cmd_weather(message: types.Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_start_point)
    await message.answer(
        "üåç –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞)",
        reply_markup=get_location_keyboard()
    )


@router.message(WeatherStates.waiting_for_start_point)
async def process_start_point(message: types.Message, state: FSMContext):
    if message.location:
        location = f"{message.location.latitude},{message.location.longitude}"
    else:
        location = message.text

    await state.update_data(start_point=location)
    await state.set_state(WeatherStates.waiting_for_end_point)
    await message.answer(
        "üìç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞",
        reply_markup=get_location_keyboard()
    )


@router.message(WeatherStates.waiting_for_end_point)
async def process_end_point(message: types.Message, state: FSMContext):
    if message.location:
        location = f"{message.location.latitude},{message.location.longitude}"
    else:
        location = message.text

    await state.update_data(end_point=location)
    await state.set_state(WeatherStates.waiting_for_interval)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    await message.answer(
        "‚è± –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:",
        reply_markup=get_interval_keyboard()
    )


@router.callback_query(F.data.startswith("interval_"))
async def process_interval(callback: types.CallbackQuery, state: FSMContext):
    interval = int(callback.data.split("_")[1])
    await state.update_data(interval=interval)

    user_data = await state.get_data()
    route_text = f"""
üó∫ –í–∞—à –º–∞—Ä—à—Ä—É—Ç:
- –ù–∞—á–∞–ª–æ: {user_data['start_point']}
- –ö–æ–Ω–µ—Ü: {user_data['end_point']}
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –¥–Ω–µ–π

–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏?
"""
    await callback.message.edit_text(
        route_text,
        reply_markup=get_route_confirmation_keyboard()
    )
    await state.set_state(WeatherStates.confirming_route)


@router.callback_query(WeatherStates.confirming_route, F.data == "route_add")
async def add_intermediate_point(callback: types.CallbackQuery, state: FSMContext):
    logger.info("Adding intermediate point...")
    await callback.message.edit_text("üìç –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞")
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:",
        reply_markup=get_location_keyboard()
    )
    await state.set_state(WeatherStates.waiting_for_intermediate)


@router.message(WeatherStates.waiting_for_intermediate)
async def process_intermediate_point(message: types.Message, state: FSMContext):
    if message.location:
        location = f"{message.location.latitude},{message.location.longitude}"
    else:
        location = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    if 'intermediate_points' not in data:
        data['intermediate_points'] = []
    data['intermediate_points'].append(location)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(intermediate_points=data['intermediate_points'])

    route_text = f"""
üó∫ –í–∞—à –º–∞—Ä—à—Ä—É—Ç:
- –ù–∞—á–∞–ª–æ: {data['start_point']}
- –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏: {', '.join(data['intermediate_points'])}
- –ö–æ–Ω–µ—Ü: {data['end_point']}
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {data['interval']} –¥–Ω–µ–π
"""
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    await message.answer(
        route_text,
        reply_markup=ReplyKeyboardRemove()
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        "–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ—á–∫–∏?",
        reply_markup=get_route_confirmation_keyboard()
    )
    await state.set_state(WeatherStates.confirming_route)


@router.callback_query(WeatherStates.confirming_route, F.data == "route_confirm")
async def process_weather_request(callback: types.CallbackQuery, state: FSMContext):
    logger.info("Processing weather request...")
    await callback.answer("‚è≥ –ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã...")

    user_data = await state.get_data()
    logger.info(f"User data: {user_data}")

    try:
        await callback.message.edit_text("üîÑ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")

        weather_data = await weather_service.get_route_weather(
            start_point=user_data['start_point'],
            end_point=user_data['end_point'],
            interval=user_data['interval'],
            intermediate_points=user_data.get('intermediate_points', [])
        )

        formatted_forecast = format_weather_forecast(weather_data)
        await callback.message.edit_text(
            formatted_forecast,
            parse_mode="HTML"
        )
        logger.info("Weather forecast sent successfully")

    except Exception as e:
        logger.error(f"Error in process_weather_request: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:\n{str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        )

    finally:
        await state.clear()


@router.callback_query(WeatherStates.confirming_route, F.data == "route_restart")
async def restart_weather_request(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:"
    )
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:",
        reply_markup=get_location_keyboard()
    )
    await state.set_state(WeatherStates.waiting_for_start_point)